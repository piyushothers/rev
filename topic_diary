September 7th
==============

1.Kruskal algorithm 2.Prim's algorithm 3.running time for insertion and pop from a heap 4. how to make a stream for finite for loops 5.heap implementation for any comparable object  GridOfManyXors - did everything right but still the solution doesn't work leave it v(logV) + ElogV why is prim algorithm mmm - moniker - an informal name


8th
====
following components to be provided by reactive stream implementations
	- Publisher 
	- Subscriber
	- Subscription
	- Processor
	
- publishers cannot signal more elements than subscribers have requested.

Concurrent linked queue ? 
all the collections in java.util.concurrent and what are they used for ? 

concurrent linked queue 
	- iterators are weakly consistent 
	- size method is not a constant time operation as it requires traversal 
	- memory consistency effects: actions in a thread prior to placing an object into a Concurrent Linked Queue happen-before actions subsequent to the access or removal of that element from the ConcurrentLinkedQueue in another thread. 

what is compare and set operation ?  implementation of concurrent linked queue ? how is garbage collection done ? java memory model  ? what is sun.misc.UNSAFE ? 
https://dzone.com/articles/understanding-sunmiscunsafe . what are class loaders . how is class loading done in java . how does sun.misc.UNSAFE guarantee that it is only called from its own internal classes. reflectionfactory in java . how to create a class in java without calling its constructor . 


sun.misc.unsafe 
	- singleton instance is loaded in a private static field called theUnsafe.
	- 
	
links 
	- http://www.cs.rochester.edu/~scott/papers/1996_PODC_queues.pdf
	
14th
-----
Junit
	1.
- lifecycle methods of junit test file . 
	- rules of each lifecycle method.
	- expecting exceptions
	- runner and what are its benefits
	
- the order of test cases varies from JVM to JVM.
- assumeTrue,assumeFalse,assumeThat,assumeNotNull 
- how to write a test suite 
- isNaN in java ? 
- creating your own Matcher using hamcrest interfaces.
- theory . timed out tests . parameterized test with constructor . parameterized test without constructor.
- https://dzone.com/articles/building-custom-datapoints
- rule allow very flexible addition or redefinition of the behavior of each test method in a test class.
- temporaryfolder rule , error collector rule , timeout rule , external resource rule , test name rule , verifier rule.

1.how to run code snippets a) before and after each test b) before and after the class 2.assertSame vs assertEquals 3.how to test for a double value with some room for error 4.how to test for a function whose expected output is an exception 5.what is a valid input to Suite.class 6.@Ignore and why is it better than commenting out the code 7.how to determine the order in which the tests run , can we enforce our own ordering on the test 8.what are assumptions and why should we use it during tests 9.how to assert with Matcher , the library where Matchers are found and what are its benefits 10.how to create own custom matcher 11.how to create parameterized tests using constructor 12. how to create parameterized test without constructor and how to assign order to fields 13.how to enforce timeout for a test ( possible reason might be for performance reasons) 14.why are theories used 15. how to create a external parameter supplier to a theory 16.timeout rule 17.ExpectedException rule 18.temporaryfolder rule and where is the path for temporary folder 19.ErrorCollector rule 20.verifier rule 21.TestWatcher rule 22.testName rule 23.Category runner and why are they used , what happens when a class is in both IncludeCategories and ExcludeCategories.

3.
- types of test doubles 

15th
----
https://www.javaworld.com/article/2074689/hamcrest-containing-matchers.html 
verify is like toBeCalled , thenAnswer has to be supplied with an instance of answer interface so that dynamic logic can be applied . spy is for spying on objects . mockDetails is to know whether the instance is a mock or spy . argumentCaptor is to capture the arguments called for a method . 