
8/27/2019	refactoring - chapter 1 to 3, creating a connected component in react , setting up react saga , difference between test stubs and test mocks(martin fowler article)
8/28/2019	flexbox mdn site , css selectors w3 schools , refactoring chapter 4-9 
8/29/2019	refactoring chapter 10-11, SOUL session 1, https://www.airpair.com/express/posts/expressjs-and-passportjs-sessions-deep-dive
8/31/2019	refactoring 12-15
9/4/2019	- render props , render props with typescript medium article , render props in angular , wap - render props in react
9/11/2019	1.Kruskal algorithm 2.Prim's algorithm 3.running time for insertion and pop from a heap 4. how to make a stream for finite for loops 5.heap implementation for any comparable object  GridOfManyXors - did everything right but still the solution doesn't work leave it. v(logV) + ElogV why is prim algorithm mmm - moniker - an informal name . Barking up the wrong tree chapter 3 . Concurrent linked queue ? all the collections in java.util.concurrent and what are they used for ? concurrent linked queue
9/12/2019	shortcuts in reasoning chapter 1-11


September 7th
==============

1.Kruskal algorithm 2.Prim's algorithm 3.running time for insertion and pop from a heap 4. how to make a stream for finite for loops 5.heap implementation for any comparable object  GridOfManyXors - did everything right but still the solution doesn't work leave it 
v(logV) + ElogV why is prim algorithm mmm - moniker - an informal name


8th
====
following components to be provided by reactive stream implementations
	- Publisher 
	- Subscriber
	- Subscription
	- Processor
	
- publishers cannot signal more elements than subscribers have requested.

Concurrent linked queue ? 
all the collections in java.util.concurrent and what are they used for ? 

concurrent linked queue 
	- iterators are weakly consistent 
	- size method is not a constant time operation as it requires traversal 
	- memory consistency effects: actions in a thread prior to placing an object into a Concurrent Linked Queue happen-before actions subsequent to the access or removal of that element from the ConcurrentLinkedQueue in another thread. 

what is compare and set operation ?  implementation of concurrent linked queue ? how is garbage collection done ? java memory model  ? what is sun.misc.UNSAFE ? 
https://dzone.com/articles/understanding-sunmiscunsafe . what are class loaders . how is class loading done in java . how does sun.misc.UNSAFE guarantee that it is only called from its own internal classes. reflectionfactory in java . how to create a class in java without calling its constructor . 


sun.misc.unsafe 
	- singleton instance is loaded in a private static field called theUnsafe.
	- 
	
links 
	- http://www.cs.rochester.edu/~scott/papers/1996_PODC_queues.pdf
	
14th (Crossover start)
-----
Junit
	1.
- lifecycle methods of junit test file . 
	- rules of each lifecycle method.
	- expecting exceptions
	- runner and what are its benefits
	
- the order of test cases varies from JVM to JVM.
- assumeTrue,assumeFalse,assumeThat,assumeNotNull 
- how to write a test suite 
- isNaN in java ? 
- creating your own Matcher using hamcrest interfaces.
- theory . timed out tests . parameterized test with constructor . parameterized test without constructor.
- https://dzone.com/articles/building-custom-datapoints
- rule allow very flexible addition or redefinition of the behavior of each test method in a test class.
- temporaryfolder rule , error collector rule , timeout rule , external resource rule , test name rule , verifier rule.

1.how to run code snippets a) before and after each test b) before and after the class 2.assertSame vs assertEquals 3.how to test for a double value with some room for error 4.how to test for a function whose expected output is an exception 5.what is a valid input to Suite.class 6.@Ignore and why is it better than commenting out the code 7.how to determine the order in which the tests run , can we enforce our own ordering on the test 8.what are assumptions and why should we use it during tests 9.how to assert with Matcher , the library where Matchers are found and what are its benefits 10.how to create own custom matcher 11.how to create parameterized tests using constructor 12. how to create parameterized test without constructor and how to assign order to fields 13.how to enforce timeout for a test ( possible reason might be for performance reasons) 14.why are theories used 15. how to create a external parameter supplier to a theory 16.timeout rule 17.ExpectedException rule 18.temporaryfolder rule and where is the path for temporary folder 19.ErrorCollector rule 20.verifier rule 21.TestWatcher rule 22.testName rule 23.Category runner and why are they used , what happens when a class is in both IncludeCategories and ExcludeCategories.

3.
- types of test doubles 

15th
----
https://www.javaworld.com/article/2074689/hamcrest-containing-matchers.html 
verify is like toBeCalled , thenAnswer has to be supplied with an instance of answer interface so that dynamic logic can be applied . spy is for spying on objects . mockDetails is to know whether the instance is a mock or spy . argumentCaptor is to capture the arguments called for a method . 

activity
 - i1 - chapter 4 and 5 - packt mastering unit testing with junit4 and mockito
 
16th
----
!!!guidelines
- whatever be the case - non-fasting weekdays are only for health purpose and nothing else.

!!!activity roster (monthly target) - break point - 10% body fat

!!!rev_roster(daily)


17
--
packt - mastering unit testing
i1 - 6,7,8
i2- 4

- don't instantiate dependencies in the constructor. it is impossible to mock . pass the real implementation of the dependencies to the constructor or to the setter methods of the code under test.
- tdd steps - write a failing test - add code only to satisfy the test - refactor code to improve quality - repeat . 
- test code smells 
	- test code duplication 
	- test code body should just be an expansion of test description , anything more is mumbo jumbo.
18
--
- shortcuts in reasoning chapter 12.

19.
--
- shortcuts in reasoning chapter 13 . ( watch you tube videos , you lack severely here)
- bank po reasoning puzzle questions , you tube b ankersadda247 , anshul saini

20
--

23
--
!!!time table

- all weekends are for studies.
- all other non-study days - 3.66 on average to be used for health , if you get a wfh day , use it for going to gym twice.
- all 4 divisible study days are for revision.
- all non-weekend study days are for studying for office work .
- on fasting study weekdays , do office work 
- on non-fasting study weekdays , do office work and go to the gym. 

tuesday,thursday - study for office(5h) + 9h of office work + fasting
monday,wednesday,friday - office + health , 4 divisibles are for work from home where you'll go to the gym twice.
saturday - target study
sunday - target study

non-fasting-health-weekday- 6am-wake up 6-8-get ready 8-8:30-travel to gym 8:30-9:30-workout 9:30-10-travel back 10-11- get ready for office 11-12-travel 12-10-office 10-11-walk back home 11-12-break act 12-sleep ( try to save time to sleep at 11 and do 2x yoga and sarvangaasan) 

non-fasting-health-weekend- 6am-wake up 6-8-get ready 8-8:30-travel to gym 8:30-9:30-workout 9:30-10-travel back 11-8-sleep 8-9-get ready and reach gym 9-10-workout 10-11-dinner and travel back 11-12-wind down 12-1-break act 1-sleep 
 
Non-fasting-study weekdays- 6am- wake up 6-11- study + pranayam + 2*protein drink + fresh 11-7-revision 7-8-get ready and reach gym 8-9-workout 9-10-dinner + travel back 10-11-wind down 11-12-break act

fasting weekdays- 6am- wake up 6-10:30- study + pranayam + 2*protein drink + fresh 10:30-11- get ready for office 11-12-travel 12-7-office + lunch + dinner 7-8-travel to room 8-10-work/study 10-11-rtn2 + sarvangasan 11-6-- sleep 

non-fasting-weekend- 6am- wake up 6-7:30-study 7:30-10-gym + protein shake 10-11-rtn2 + sarvangasan 11-6-- sleep 

fasting-weekend- 6am- wake up 6-10pm - study 10-11-rtn2 + sarvangasan 11-6-- sleep 

28
--
graphql 1-5 it1

29
---

october

6th
---
- how to create react middleware . 
- code for createStore 
- code for redux thunk 
- immutable.js
- typescript partial and other utility classes.

9th
---
- service worker in javascript
- 

12th
----
udemy - aws architect associate ebs 1-10 iter 1

RDS and Aurora
--------------

https://048373841000.signin.aws.amazon.com/console
https://piyush-2-root.signin.aws.amazon.com/console

notes
- non-relational dbs are best suited for OLAP.
non relational types 
	- columnar database
	- document database
	- graph databases
	- in-memory key-value databases
	
- the subnet cannot cross an availability zone.
- CNAME is the dns of the aws resource( canonical name)
	
Q.
1.why relational db does not scale horizontally 2.s



EBS(Elastic BackStore)
----------------------
- types of block storage 
	- block store ( like files and folder eg. S3)  - ebs backed ec2 instance ( os/boot volume on an ebs block store) can be restarted , rebooted . 
	- instance store ( not persistent) - limited to 10GB per volume. - it is a virtual hard drive allocated to the ec2 instance . instance-store backed ec2 instances boot from an AMI stored on an S3.  ec2 instance can't be stopped , can only be rebooted or terminated. reboot will not erase the instance store data.
	- ter
	
- NAS ? 
- elastic block storage is mapped to the ec2 instance via NAS in the same availability zone . It doesn't exist physically or virtually on the guest OS . EBS can be a root volume ( with OS)or a data volume ( containing applications.). EBS is persistent . 

https://piyush-2-root.signin.aws.amazon.com/console

root - piyush.2.aws@gmail.com - P@ssw0rd
admiin - piyush_admin - Jan@@2001

13
https://aws.amazon.com/blogs/aws/new-encrypted-ebs-boot-volumes/
udemy - aws architect associate ebs 11-16


December 

14 - VPC
---

1.available private addresses 2.
- virtual environment on AWS. Analogous to a data centre.
s3 is a folder
ec2 is a server.
- vpc is a region specific . One region may have many availability zones. VPC can span multiple availability zone.
- one availability zone can have multiple subnets. 
cidr tutorial
- implied router facilitates the communication between subnets setup in a region and from subnet to outside world. This doesn't have to be setup manually.
- route table contain the entries for packet routing.
- internet gateway - for communication with outside world
- security groups - analogous to firewall - last line of defense. functions at nic level
- nacl - work at subnet level - first line of defense.
- virtual private gateway - 

Implied router
	- communication between subnets , subnet to vgw and subnet to igw
	- central vpc routing function , that means 1 per vpc
	- each subnet has a route table.
- by default,1 subnet will be created in each availability zone for a region
- 1 subnet cannot extend beyond an availability zone.
- you can have resources that are not attached to any vpc , eg. internet gateway(igw) , you've to manually attach/detach them to/from vpc.
- main route table in the vpc can't be deleted.

vpc types and vpc security
- hypervisor does the emulation from real os to virtual os.
- security group functions at the eni level , 
- security group is stateful, if one side journey is allowed, the other side journey is allowed too.
- 

Eni = virtual Nic eni is used on ec2 instances.
nic = network interface card.
eni = elastic network interface.

security group is a virtual firewall over ec2 instances at the eni level. 
- each ec2 instance can have upto 5 security groups 
- security group rules are directional in nature.
- public subnet should have an igw configured.
- ec2 instance is configured within a subnet.
- route tables 

lecture 8
	- how to view default security groups ? 
	- how to view igw
	- how to read the inbound and outbound rules of a security group , and why is the entries different for source  
	- create your own security group.
	- create custom echo request and response rules for your custom vpc
	- when configuring source security groups for inbound/outbound rules , other vpc resources will not be available for selection because security group is a vpc resource.
	- inbound requests all always allowed from the same security group.

9
	- within a vpc subnet routing is never a problem.
	- 
11.
	- what are the default number of nacls
	- within a subnet communication , NACL has no role to play.
	- create custom inbound and outbound rules in nacl
	- difference between default rules for custom and default NACL
	- 
tcp/ip packet headers

	- no need to configure rule for intra-vpc communication as there is an uneditable default rule for the same.

NAT instance is the placed in the public subnet . normal ec2 instance which is loaded with an ami and has the nat function in it. there is an entry in routing table for the private subnet source which has to go to internet to redirect it to the NAT instance.
- NAT works as the router for a multiple connected sources (performing a PAT function) . public address translation.

- NAT gateway is a managed service provided by the AWS.nat instance can work with public as well as elastic ip address, nat gateway on the other hand can work only with elastic ip addresses.

- Vpc peering doesn't work if the vpc's have overlapping cidr blocks.
- vpc peering connection is an AWS managed service.
- if 2 vpc's are peered , they can refer each other's security group reference while defining the inbound and outbound rules.
- placement group is a set of ec2 instances in the same availability zones.
- vpc peering data happens over aws backbone and not in the internet. 
- direct connect links cannot attach to transit gateway other than through a direct connect gateway.
- dynamic route propogation in routing table.
- 802.1Q , bgp ? 
- there is no route propogation to the customer gateway , it's only between the vgw and the routing table.
- route table -> vgw -> direct ( connectlink / vpn connection)

- a vgw has a public ip end point.
- direct connect gateway needs a private vif , it is a global resource which can connect to different vpc across accounts and regions. 
- s3 and dynamo db have interface endpoints , other services have gateway endpoints.
- lab - create a s3 gateway endpoint for private subnet on a vpc.
- private dns setting in the interface end point is a must have if you want all the traffic for the was service to go through the AWS infrastructure and not exposed to the internet.

https://aws.amazon.com/transit-gateway/ - details for AWS transit gateway
https://docs.aws.amazon.com/directconnect/latest/UserGuide/Welcome.html - direct connect 
	private vif and public vif ? architecture diagram connecting customer gateway , vpc , direct connect and aws public services , indicationg public and private vif . 


	To use AWS Direct Connect in an AWS Direct Connect location, your network must meet one of the following conditions:

Your network is colocated with an existing AWS Direct Connect location. For more information about available AWS Direct Connect locations, see AWS Direct Connect Product Details.

You are working with an AWS Direct Connect partner who is a member of the AWS Partner Network (APN). For information, see APN Partners Supporting AWS Direct Connect.

You are working with an independent service provider to connect to AWS Direct Connect.

In addition, your network must meet the following conditions:

Your network must use single-mode fiber with a 1000BASE-LX (1310 nm) transceiver for 1 gigabit Ethernet or a 10GBASE-LR (1310 nm) transceiver for 10 gigabit Ethernet.

Auto-negotiation for the port must be disabled. Port speed and full-duplex mode must be configured manually.

802.1Q VLAN encapsulation must be supported across the entire connection, including intermediate devices.

Your device must support Border Gateway Protocol (BGP) and BGP MD5 authentication.

(Optional) You can configure Bidirectional Forwarding Detection (BFD) on your network. Asynchronous BFD is automatically enabled for AWS Direct Connect virtual interfaces, but does not take effect until you configure it on your router.

To begin using your AWS Direct Connect connection, you must create a virtual interface. You can create a private virtual interface to connect to your VPC. Or, you can create a public virtual interface to connect to public AWS services that aren't in a VPC. When you create a private virtual interface to a VPC, you need a private virtual interface for each VPC that you're connecting to. For example, you need three private virtual interfaces to connect to three VPCs.

describe the terms used for virtual interfaces - connection , vlan , peer ip addresses ??

diagram for connecting direct connect to a transit gateway to a customer centre ??

A Direct Connect gateway is a globally available resource. You can create the Direct Connect gateway in any public Region and access it from all other public Regions.

direct connect inbound policies 
	- clients must own the public prefixes and they must be registered as such 
	- traffic must be destined to Amazon public prefixes 
	- transitive routing between connections is not supported 
	- aws dx performs inbound packet filtering to the validate that the source of traffic originated from your advertised prefix

NAT instance ?? ELB ?? elastic IP ??  IPSec VPN ??

2020
January

25th

java ivq - 1 to 26.


February
27th - 
spring-boot-100-notes.
git - in 28 minutes / spring-boot-masterclass

componentScan and Autoconfiguration in spring boot ? 
@SpringBootApplication

create a login controller 
@RequestMapping ? @Controller ? 4 annotations for creating a controller ? 
how to change the logging level of a package ? how to set the method to not search for a view and return the response instead ? 
@Component vs @Repository vs @Service
	- dispatcher servelet will look for @RequestMapping on classes which are annotated with @Controller but not with @Component
	- 

what is @Autowired
how to declare persistenceexceptiontranslationpostprocessor

check the configurations in spring-boot-starter-parent , spring-boot-starter-web , 
- create a jsp and send it as a response
View resolver ? 

can request mapping  be used on a class

how to pass request parameters to controller/ view ? getting the value from model in view 
request attribute vs request param

how does dispatcher servlet work 

specify http method in request RequestMapping

8.
how does request param get its default . 
- declare a service bean and inject it into controller

9.
multiple values for component scan ? 

10.
- create todo model and service , todo controller with list todos  , 

11.
- model 1 vs model 2 architecture
12.
- how to set session attributes in model

13.


15.
- webjars ? 
- 

18.
- add form backed bean 
- model vs modelmap - use model map to gracefully handle binding errors

19.
- 

20
- set a date format across the application

22.
- how to change the default login page of spring security
- configure spring security 
- how to configure spring security to use Octa
- 

spring cloud
--------------

github - in28minutes/spring-microservices
controller vs restcontroller
@RequestBody
servleturicomponentsbuilder
how to map exception to http status
responseentityexceptionhandler
controlleradvice
how to define a common error handling across all containers ? @controller advice and @exceptionhandler
responseentity? 

26.
 - versioning using headers , uri , params , mime 
 - 

 31.
 - how to use spring data repository for entity management.
 - 

 Spring cloud 
 - spring cloud config server for different configuration in different environments. 
 - ribbon is the load balancer 
 - eureka is the naming server 
 - Feign - easier rest clients
 - zipkin distributed tracing 
 - zuul netflix api gateway
 - hysterix for fault tolerance 

project - in 28 minutes/spring-microservices

- authentication for spring cloud config server 
- how to read configuration values using spring boot annotation
- 
- add spring.cloud.config.server.git.uri=file://<path-to-local-git-repository-root>
- @EnableConfigServer annotation helps to retrieve config values from spring cloud config server
- config values will only read by cloud config server after commit to the repository
- use bootstrap.properties instead of application.properties . bootstrap should only contain the name of the application and the url of spring cloud config server
- spring.profiles.active=dev , either set through vm arguments/ java arguments
- vm argument overrides application.properties
- new RestTemplate.getForEntity(url, responseholderclass, mapperForVariables)

ribbon 
<service-name>.ribbon.listOfServers

why is ribbon a bad idea. 
- 
@EnableFeignClient
@EnableEurekaServer
@EnableDiscoveryClient
	- eureka.client.service-url.default-zone=http://localhost:8761/eureka
localhost:8761 / for getting eureka console 

@FeignClient

@EnableZuulProxy


ZuulLoggingFilter extends ZuulFilter
	- filter Order ? 
	- shouldFilter ? 
	- filterType ? "pre/post/error"
	- run ? - 

- how to write a Zuul filter for authentication ? 

@EnableWebSecurity
 extends WebSecurityConfigurerAdapter


 Sleuth 
 - Always Sampler 
 - sleuth-zipkin dependency 
 - zipkin runs over rabbit mq
 - 

 @EnableZipkinServer

 dependency - spring-cloud-starter-bus-amqp

 spring-cloud-starter-hystrix
 @EnableHystrix
 @HystrixCommand


Feb

12th 
spring-cloud-starter-hystrix
 @EnableHystrix
 @HystrixCommand
 @ControllerAdvice
 @ResponseStatus
 ResponseEntity


 unit tests
 -----------
 spring-boot-starter-test
 how to verify method calls with argument types verify(a.call,times) , atleastonce , atMost
 mock dependency injections @Mock @InjectMOcks
 argument capture - ArgumentCaptor<T> lj  = ArgumentCaptor.for(T.class) captor.capture , captor.getValue() , captor.getAllValues()
 mock does not retain behavior of the mocked class whereas a spy retains the behavior of the class and only specific methods can be stubbed
 @WebMvcTest(T.class)

 